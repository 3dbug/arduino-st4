// This file is part of Arduino ST4.
//
// Arduino ST4 is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Arduino ST4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with Arduino ST4.  If not, see <http://www.gnu.org/licenses/>.

// ASCOM Telescope driver for ArduinoST4
//
// Description:	Driver for an USB-ST4 interface implemented with an arduino.
//              Pulse guiding and slew is supported, allowing for very slow goto :)
//
// Implements:	ASCOM Telescope interface version: <To be completed by driver developer>
// Author:		(Kevin FERRARE) kevinferrare@gmail.com

using ASCOM.DeviceInterface;
using ASCOM.Utilities;
using System;
using System.Collections;
using System.Globalization;
using System.Runtime.InteropServices;

namespace ASCOM.ArduinoST4
{
    /// <summary>
    /// ASCOM Telescope Driver for ArduinoST4.
    /// A big part of the code in this class is autogenerated boilerplate for ASCOM API.
    /// Real logic is under AxisPositionController.
    /// 
    /// GUID is for COM identification of the component.
    /// ClassInterface is to make it invisible to other COM clients.
    /// </summary>
    /// Author:  Kevin Ferrare
    [Guid("045b2ced-6f70-4a3a-8483-1891f235deb1")]
    [ClassInterface(ClassInterfaceType.None)]
    public class Telescope : ITelescopeV3, IDisposable
    {
        private static DriverRegistrationManager driverRegistrationManager;
        public static Configuration Configuration { get; set; }
        static Telescope(){
            driverRegistrationManager = new DriverRegistrationManager();
            Configuration = new Configuration(driverRegistrationManager.DriverId, false);
        }

        /// <summary>
        /// ASCOM Utilities object, used only to calculate dates
        /// </summary>
        private Util utilities = new Util();

        /// <summary>
        /// Logger
        /// </summary>
        private TraceLogger traceLogger;

        private TelescopeController telescopeController;

        public Telescope()
        {
            // Read device configuration from the ASCOM Profile store
            Configuration.ReadProfile();
            // Take values in account
            Init();
        }

        /// <summary>
        /// Initializes the driver from the configuration
        /// </summary>
        public void Init()
        {
            traceLogger = new TraceLogger("", "ArduinoST4");
            traceLogger.Enabled = Configuration.TraceState;
            traceLogger.LogMessage("Telescope", "Starting initialisation");
            telescopeController = new TelescopeController(Configuration);
            traceLogger.LogMessage("Telescope", "Completed initialisation");
        }


        #region Common properties and methods.

        /// <summary>
        /// Displays the Setup Dialog form.
        /// If the user clicks the OK button to dismiss the form, then
        /// the new settings are saved, otherwise the old values are reloaded.
        /// THIS IS THE ONLY PLACE WHERE SHOWING USER INTERFACE IS ALLOWED!
        /// </summary>
        public void SetupDialog()
        {
            // Only show the setup dialog if not connected
            if (this.telescopeController.Connected)
            {
                System.Windows.Forms.MessageBox.Show("Already connected, just press OK");
                return;
            }

            using (SetupDialogForm setupDialogForm = new SetupDialogForm())
            {
                var result = setupDialogForm.ShowDialog();
                if (result == System.Windows.Forms.DialogResult.OK)
                {
                    // Persist device configuration values to the ASCOM Profile store
                    Configuration.WriteProfile();
                    // Take in account new values
                    Init();
                }
            }
        }

        public void CommandBlind(string command, bool raw)
        {
            this.telescopeController.CommandString(command, raw);
        }

        public bool CommandBool(string command, bool raw)
        {
            return telescopeController.CommandBool(command, raw);
        }

        public string CommandString(string command, bool raw)
        {
            return telescopeController.CommandString(command, raw);
        }

        public bool Connected
        {
            get
            {
                return this.telescopeController.Connected;
            }
            set
            {
                this.telescopeController.Connected = value;
            }
        }

        public string Description
        {
            get
            {
                traceLogger.LogMessage("Description Get", driverRegistrationManager.DriverDescription);
                return driverRegistrationManager.DriverDescription;
            }
        }

        public string DriverInfo
        {
            get
            {
                string driverInfo = "Information about the driver itself. Version: " + DriverVersion;
                traceLogger.LogMessage("DriverInfo Get", driverInfo);
                return driverInfo;
            }
        }

        public string DriverVersion
        {
            get
            {
                Version version = System.Reflection.Assembly.GetExecutingAssembly().GetName().Version;
                string driverVersion = String.Format(CultureInfo.InvariantCulture, "{0}.{1}", version.Major, version.Minor);
                traceLogger.LogMessage("DriverVersion Get", driverVersion);
                return driverVersion;
            }
        }

        public short InterfaceVersion
        {
            // set by the driver wizard
            get
            {
                traceLogger.LogMessage("InterfaceVersion Get", "3");
                return 3;
            }
        }

        public string Name
        {
            get
            {
                string name = "ArduinoST4";
                traceLogger.LogMessage("Name Get", name);
                return name;
            }
        }

        #endregion

        #region ITelescope Implementation
        public void AbortSlew()
        {
            this.telescopeController.AbortSlew();
        }

        public AlignmentModes AlignmentMode
        {
            get
            {
                return AlignmentModes.algGermanPolar;
            }
        }

        public IAxisRates AxisRates(TelescopeAxes axis)
        {
            traceLogger.LogMessage("AxisRates", "Get - " + axis.ToString());
            return this.telescopeController.AxisRates(axis);
        }

        #region Capabilities
        public bool CanMoveAxis(TelescopeAxes axis)
        {
            traceLogger.LogMessage("CanMoveAxis", "Get - " + axis.ToString());
            switch (axis)
            {
                case TelescopeAxes.axisPrimary: return true;
                case TelescopeAxes.axisSecondary: return true;
                case TelescopeAxes.axisTertiary: return false;
                default: throw new InvalidValueException("CanMoveAxis", axis.ToString(), "0 to 2");
            }
        }

        public bool CanPulseGuide
        {
            get
            {
                traceLogger.LogMessage("CanPulseGuide", "Get - " + true.ToString());
                return true;
            }
        }

        public bool CanSetGuideRates
        {
            get
            {
                traceLogger.LogMessage("CanSetGuideRates", "Get - " + false.ToString());
                return false;
            }
        }

        public bool CanSlew
        {
            get
            {
                traceLogger.LogMessage("CanSlew", "Get - " + true.ToString());
                return true;
            }
        }

        public bool CanSlewAsync
        {
            get
            {
                traceLogger.LogMessage("CanSlewAsync", "Get - " + true.ToString());
                return true;
            }
        }

        public bool CanSync
        {
            get
            {
                traceLogger.LogMessage("CanSync", "Get - " + true.ToString());
                return true;
            }
        }

        public bool CanFindHome
        {
            get
            {
                //No feedback on position=> cannot find home
                traceLogger.LogMessage("CanFindHome", "Get - " + false.ToString());
                return false;
            }
        }

        public bool CanPark
        {
            get
            {
                //No feedback on position=> cannot park
                traceLogger.LogMessage("CanPark", "Get - " + false.ToString());
                return false;
            }
        }

        public bool CanSetDeclinationRate
        {
            get
            {
                traceLogger.LogMessage("CanSetDeclinationRate", "Get - " + false.ToString());
                return false;
            }
        }

        public bool CanSetPark
        {
            get
            {
                traceLogger.LogMessage("CanSetPark", "Get - " + false.ToString());
                return false;
            }
        }

        public bool CanSetPierSide
        {
            get
            {
                traceLogger.LogMessage("CanSetPierSide", "Get - " + false.ToString());
                return false;
            }
        }

        public bool CanSetRightAscensionRate
        {
            get
            {
                traceLogger.LogMessage("CanSetRightAscensionRate", "Get - " + false.ToString());
                return false;
            }
        }

        public bool CanSetTracking
        {
            get
            {
                traceLogger.LogMessage("CanSetTracking", "Get - " + false.ToString());
                return false;
            }
        }


        public bool CanSlewAltAz
        {
            get
            {
                traceLogger.LogMessage("CanSlewAltAz", "Get - " + false.ToString());
                return false;
            }
        }

        public bool CanSlewAltAzAsync
        {
            get
            {
                traceLogger.LogMessage("CanSlewAltAzAsync", "Get - " + false.ToString());
                return false;
            }
        }

        public bool CanSyncAltAz
        {
            get
            {
                traceLogger.LogMessage("CanSyncAltAz", "Get - " + false.ToString());
                return false;
            }
        }

        public bool CanUnpark
        {
            get
            {
                traceLogger.LogMessage("CanUnpark", "Get - " + false.ToString());
                return false;
            }
        }

        #endregion


        public double Declination
        {
            get
            {
                return this.telescopeController.Declination;
            }
        }

        public EquatorialCoordinateType EquatorialSystem
        {
            get
            {
                EquatorialCoordinateType equatorialSystem = EquatorialCoordinateType.equLocalTopocentric;
                traceLogger.LogMessage("DeclinationRate", "Get - " + equatorialSystem.ToString());
                return equatorialSystem;
            }
        }

        public double GuideRateDeclination
        {
            get
            {
                return this.telescopeController.GuideRateDeclination;
            }
            set
            {
                traceLogger.LogMessage("GuideRateDeclination Set", "Not implemented");
                throw new ASCOM.PropertyNotImplementedException("GuideRateDeclination", true);
            }
        }

        public double GuideRateRightAscension
        {
            get
            {
                return this.telescopeController.GuideRateRightAscension;
            }
            set
            {
                traceLogger.LogMessage("GuideRateRightAscension Set", "Not implemented");
                throw new ASCOM.PropertyNotImplementedException("GuideRateRightAscension", true);
            }
        }

        public bool IsPulseGuiding
        {
            get
            {
                return this.telescopeController.Moving;
            }
        }

        public void MoveAxis(TelescopeAxes telescopeAxis, double rate)
        {
            this.telescopeController.MoveAxis(telescopeAxis, rate);
        }


        public void PulseGuide(GuideDirections direction, int duration)
        {
            this.telescopeController.PulseGuide(direction, duration);
        }

        public double RightAscension
        {
            get
            {
                return this.telescopeController.RightAscension;
            }
        }

        public double SiderealTime
        {
            get
            {
                double siderealTime = (18.697374558 + 24.065709824419081 * (utilities.DateLocalToJulian(DateTime.Now) - 2451545.0)) % 24.0;
                traceLogger.LogMessage("SiderealTime", "Get - " + siderealTime.ToString());
                return siderealTime;
            }
        }

        public void SlewToCoordinates(double rightAscension, double declination)
        {
            this.telescopeController.SlewToCoordinates(rightAscension, declination);
        }

        public void SlewToCoordinatesAsync(double rightAscension, double declination)
        {
            this.telescopeController.SlewToCoordinatesAsync(rightAscension, declination);
        }

        public void SlewToTarget()
        {
            SlewToCoordinates(TargetRightAscension, TargetDeclination);
        }

        public void SlewToTargetAsync()
        {
            SlewToCoordinatesAsync(TargetRightAscension, TargetDeclination);
        }

        public bool Slewing
        {
            get
            {
                return this.telescopeController.Moving;
            }
        }

        public void SyncToCoordinates(double rightAscension, double declination)
        {
            this.telescopeController.SyncToCoordinates(rightAscension, declination);
        }

        public void SyncToTarget()
        {
            SyncToCoordinates(TargetRightAscension, TargetDeclination);
        }

        public double TargetDeclination
        {
            get
            {
                return this.telescopeController.TargetDeclination;
            }
            set
            {
                this.TargetDeclination = value;
            }
        }

        public double TargetRightAscension
        {
            get
            {
                return this.telescopeController.TargetRightAscension;
            }
            set
            {
                this.telescopeController.TargetRightAscension = value;
            }
        }

        public bool Tracking
        {
            get
            {
                bool tracking = this.telescopeController.Tracking;
                traceLogger.LogMessage("Tracking Get", tracking.ToString());
                return tracking;
            }
            set
            {
                traceLogger.LogMessage("Tracking Set", "Not implemented");
                throw new ASCOM.PropertyNotImplementedException("Tracking", false);
            }
        }

        public DriveRates TrackingRate
        {
            get
            {
                return DriveRates.driveSidereal;
            }
            set
            {
            }
        }

        public ITrackingRates TrackingRates
        {
            get
            {
                traceLogger.LogMessage("TrackingRates", "Get - ");
                return new TrackingRates();
            }
        }

        public DateTime UTCDate
        {
            get
            {
                return DateTime.UtcNow;
            }
            set
            {
            }
        }

        #endregion

        #region Helpers

        #region ASCOM Registration

        /// <summary>
        /// This function registers the driver with the ASCOM Chooser and
        /// is called automatically whenever this class is registered for COM Interop.
        /// </summary>
        /// <param name="t">Type of the class being registered, not used.</param>
        /// <remarks>
        /// This method typically runs in two distinct situations:
        /// <list type="numbered">
        /// <item>
        /// In Visual Studio, when the project is successfully built.
        /// For this to work correctly, the option <c>Register for COM Interop</c>
        /// must be enabled in the project settings.
        /// </item>
        /// <item>During setup, when the installer registers the assembly for COM Interop.</item>
        /// </list>
        /// This technique should mean that it is never necessary to manually register a driver with ASCOM.
        /// </remarks>
        [ComRegisterFunction]
        public static void RegisterASCOM(Type t)
        {
            driverRegistrationManager.RegUnregASCOM(true);
        }

        /// <summary>
        /// This function unregisters the driver from the ASCOM Chooser and
        /// is called automatically whenever this class is unregistered from COM Interop.
        /// </summary>
        /// <param name="t">Type of the class being registered, not used.</param>
        /// <remarks>
        /// This method typically runs in two distinct situations:
        /// <list type="numbered">
        /// <item>
        /// In Visual Studio, when the project is cleaned or prior to rebuilding.
        /// For this to work correctly, the option <c>Register for COM Interop</c>
        /// must be enabled in the project settings.
        /// </item>
        /// <item>During uninstall, when the installer unregisters the assembly from COM Interop.</item>
        /// </list>
        /// This technique should mean that it is never necessary to manually unregister a driver from ASCOM.
        /// </remarks>
        [ComUnregisterFunction]
        public static void UnregisterASCOM(Type t)
        {
            driverRegistrationManager.RegUnregASCOM(false);
        }

        #endregion

        #endregion

        #region unimplementable
        public ArrayList SupportedActions
        {
            get
            {
                traceLogger.LogMessage("SupportedActions Get", "Returning empty arraylist");
                return new ArrayList();
            }
        }

        public string Action(string actionName, string actionParameters)
        {
            throw new ASCOM.ActionNotImplementedException("Action " + actionName + " is not implemented by this driver");
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1065:DoNotRaiseExceptionsInUnexpectedLocations")]
        public double Altitude
        {
            get
            {
                traceLogger.LogMessage("Altitude", "Not implemented");
                throw new ASCOM.PropertyNotImplementedException("Altitude", false);
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1065:DoNotRaiseExceptionsInUnexpectedLocations")]
        public double ApertureArea
        {
            get
            {
                traceLogger.LogMessage("ApertureArea Get", "Not implemented");
                throw new ASCOM.PropertyNotImplementedException("ApertureArea", false);
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1065:DoNotRaiseExceptionsInUnexpectedLocations")]
        public double ApertureDiameter
        {
            get
            {
                traceLogger.LogMessage("ApertureDiameter Get", "Not implemented");
                throw new ASCOM.PropertyNotImplementedException("ApertureDiameter", false);
            }
        }

        public bool AtHome
        {
            get
            {
                //No feedback on position=> never at home
                traceLogger.LogMessage("AtHome", "Get - " + false.ToString());
                return false;
            }
        }

        public bool AtPark
        {
            get
            {
                //No feedback on position=> never parked
                traceLogger.LogMessage("AtPark", "Get - " + false.ToString());
                return false;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1065:DoNotRaiseExceptionsInUnexpectedLocations")]
        public double Azimuth
        {
            get
            {
                traceLogger.LogMessage("Azimuth Get", "Not implemented");
                throw new ASCOM.PropertyNotImplementedException("Azimuth", false);
            }
        }

        public double DeclinationRate
        {
            get
            {
                double declination = 0.0;
                traceLogger.LogMessage("DeclinationRate", "Get - " + declination.ToString());
                return declination;
            }
            set
            {
                traceLogger.LogMessage("DeclinationRate Set", "Not implemented");
                throw new ASCOM.PropertyNotImplementedException("DeclinationRate", true);
            }
        }

        public PierSide DestinationSideOfPier(double RightAscension, double Declination)
        {
            traceLogger.LogMessage("DestinationSideOfPier Get", "Not implemented");
            throw new ASCOM.PropertyNotImplementedException("DestinationSideOfPier", false);
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1065:DoNotRaiseExceptionsInUnexpectedLocations")]
        public bool DoesRefraction
        {
            get
            {
                traceLogger.LogMessage("DoesRefraction Get", "Not implemented");
                throw new ASCOM.PropertyNotImplementedException("DoesRefraction", false);
            }
            set
            {
                traceLogger.LogMessage("DoesRefraction Set", "Not implemented");
                throw new ASCOM.PropertyNotImplementedException("DoesRefraction", true);
            }
        }

        public void FindHome()
        {
            traceLogger.LogMessage("FindHome", "Not implemented");
            throw new ASCOM.MethodNotImplementedException("FindHome");
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1065:DoNotRaiseExceptionsInUnexpectedLocations")]
        public double FocalLength
        {
            get
            {
                traceLogger.LogMessage("FocalLength Get", "Not implemented");
                throw new ASCOM.PropertyNotImplementedException("FocalLength", false);
            }
        }


        public void Park()
        {
            traceLogger.LogMessage("Park", "Not implemented");
            throw new ASCOM.MethodNotImplementedException("Park");
        }

        public double RightAscensionRate
        {
            get
            {
                double rightAscensionRate = 0.0;
                traceLogger.LogMessage("RightAscensionRate", "Get - " + rightAscensionRate.ToString());
                return rightAscensionRate;
            }
            set
            {
                traceLogger.LogMessage("RightAscensionRate Set", "Not implemented");
                throw new ASCOM.PropertyNotImplementedException("RightAscensionRate", true);
            }
        }

        public void SetPark()
        {
            traceLogger.LogMessage("SetPark", "Not implemented");
            throw new ASCOM.MethodNotImplementedException("SetPark");
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1065:DoNotRaiseExceptionsInUnexpectedLocations")]
        public PierSide SideOfPier
        {
            get
            {
                traceLogger.LogMessage("SideOfPier Get", "Not implemented");
                throw new ASCOM.PropertyNotImplementedException("SideOfPier", false);
            }
            set
            {
                traceLogger.LogMessage("SideOfPier Set", "Not implemented");
                throw new ASCOM.PropertyNotImplementedException("SideOfPier", true);
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1065:DoNotRaiseExceptionsInUnexpectedLocations")]
        public double SiteElevation
        {
            get
            {
                traceLogger.LogMessage("SiteElevation Get", "Not implemented");
                throw new ASCOM.PropertyNotImplementedException("SiteElevation", false);
            }
            set
            {
                traceLogger.LogMessage("SiteElevation Set", "Not implemented");
                throw new ASCOM.PropertyNotImplementedException("SiteElevation", true);
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1065:DoNotRaiseExceptionsInUnexpectedLocations")]
        public double SiteLatitude
        {
            get
            {
                traceLogger.LogMessage("SiteLatitude Get", "Not implemented");
                throw new ASCOM.PropertyNotImplementedException("SiteLatitude", false);
            }
            set
            {
                traceLogger.LogMessage("SiteLatitude Set", "Not implemented");
                throw new ASCOM.PropertyNotImplementedException("SiteLatitude", true);
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1065:DoNotRaiseExceptionsInUnexpectedLocations")]
        public double SiteLongitude
        {
            get
            {
                traceLogger.LogMessage("SiteLongitude Get", "Not implemented");
                throw new ASCOM.PropertyNotImplementedException("SiteLongitude", false);
            }
            set
            {
                traceLogger.LogMessage("SiteLongitude Set", "Not implemented");
                throw new ASCOM.PropertyNotImplementedException("SiteLongitude", true);
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1065:DoNotRaiseExceptionsInUnexpectedLocations")]
        public short SlewSettleTime
        {
            get
            {
                traceLogger.LogMessage("SlewSettleTime Get", "Not implemented");
                throw new ASCOM.PropertyNotImplementedException("SlewSettleTime", false);
            }
            set
            {
                traceLogger.LogMessage("SlewSettleTime Set", "Not implemented");
                throw new ASCOM.PropertyNotImplementedException("SlewSettleTime", true);
            }
        }

        public void SlewToAltAz(double Azimuth, double Altitude)
        {
            traceLogger.LogMessage("SlewToAltAz", "Not implemented");
            throw new ASCOM.MethodNotImplementedException("SlewToAltAz");
        }

        public void SlewToAltAzAsync(double Azimuth, double Altitude)
        {
            traceLogger.LogMessage("SlewToAltAzAsync", "Not implemented");
            throw new ASCOM.MethodNotImplementedException("SlewToAltAzAsync");
        }

        public void SyncToAltAz(double Azimuth, double Altitude)
        {
            traceLogger.LogMessage("SyncToAltAz", "Not implemented");
            throw new ASCOM.MethodNotImplementedException("SyncToAltAz");
        }

        public void Unpark()
        {
            traceLogger.LogMessage("Unpark", "Not implemented");
            throw new ASCOM.MethodNotImplementedException("Unpark");
        }
        #endregion

        protected virtual void Dispose(bool disposing)
        {
            this.telescopeController.Dispose();
            // Clean up the tracelogger and util objects
            this.traceLogger.Enabled = false;
            this.traceLogger.Dispose();
            this.traceLogger = null;
            this.utilities.Dispose();
            this.utilities = null;
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }
    }
}
